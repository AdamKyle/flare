# GithHub Actions Workflow generated with Ghygen
# Original configuration: https://ghygen.hi-folks.dev?code=69e5e922a10af72d863a9a040a3b00c3
name: Template - Laravel application (Mysql)
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    # Service container Mysql mysql
    services:
      # Label used to access the service container
      mysql:
        # Docker Hub image (also with version)
        image: mysql:8.0.25
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE:  flare_test
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 33306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: [ '8.0' ]
        dependency-stability: [ prefer-stable ]

    name: P${{ matrix.php-versions }} - L${{ matrix.laravel }} - ${{ matrix.dependency-stability }} - ${{ matrix.operating-system}}

    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '15.x'
      - name: Cache node_modules directory
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install NPM packages
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build frontend
        run: npm run development
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Get Composer Cache Directory 2
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
      id: actions-cache
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
      uses: actions/cache@v2
      id: vendor-cache
      with:
        path: vendor
        key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.ci', '.env');"
      - name: Install Dependencies
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: |
          rm -rf vendor
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Run Migrations
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: flare_test
          DB_PORT: 33306
          DB_USER: root
          DB_PASSWORD: password

        run: php artisan migrate

      - name: Show dir
        run: pwd
      - name: PHP Version
        run: php --version

      # Code quality
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        # Set environment
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: flare_test
          DB_PORT: 33306
          DB_USER: root
          DB_PASSWORD: password

        run: |
          yarn install
          yarn run prod
          vendor/bin/phpunit --testdox

#name: Laravel
#
#on: [push]
#
#jobs:
#  laravel-tests:
#    runs-on: ubuntu-latest
#    services:
#      mysql-service:
#        image: mysql:8.0.25
#        env:
#          MYSQL_ROOT_PASSWORD: password
#          MYSQL_DATABASE: flare_test
#        ports:
#          - 33306:3306
#        options: >-
#          --health-cmd="mysqladmin ping"
#          --health-interval=10s
#          --health-timeout=5s
#          --health-retries=3
#    steps:
#    - uses: actions/checkout@v1
#    - name: Setup PHP
#      uses: shivammathur/setup-php@v2
#      with:
#        php-version: 8.0
#    - name: Copy .env
#      run: php -r "file_exists('.env') || copy('.env.ci', '.env');"
#    - name: Install Dependencies (composer)
#      run: |
#        rm -rf vendor
#        composer install
#        yarn install
#    - name: Generate key
#      run: php artisan key:generate
#    - name: Link Storage
#      run: php artisan storage:link
#    - name: Install dependencies (laravel mix)
#      run: yarn run prod
#    - name: Execute tests (Unit and Feature tests) via PHPUnit
#      run: |
#        php artisan migrate
#        vendor/bin/phpunit
#      env:
#        DB_PORT: $[{ job.services.mysql.ports[3306] }]
